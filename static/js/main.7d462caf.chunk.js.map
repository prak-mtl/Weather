{"version":3,"sources":["Upload.js","serviceWorker.js","index.js"],"names":["Upload","props","fileChangedHandler","event","selectedFile","state","reader","FileReader","onloadend","length","newList","concat","JSON","parse","result","setState","readAsText","target","files","handleInput","name","value","handleAdd","newColor","color","category","type","code","hex","newListItem","push","handleDownload","a","document","createElement","download","href","encodeURIComponent","stringify","body","appendChild","click","removeChild","this","style","margin","onChange","map","item","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,mBAAqB,SAAAC,GAAU,IACrBC,EAAiB,EAAKC,MAAtBD,aACJE,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,GAA4B,IAAxBJ,EAAaK,OAAc,CAC7B,IAAIC,EAAUN,EAAaO,OAAOC,KAAKC,MAAMP,EAAOQ,SACpD,EAAKC,SAAS,CACZX,aAAcM,SAGhB,EAAKK,SAAS,CACZX,aAAcQ,KAAKC,MAAMP,EAAOQ,WAItCR,EAAOU,WAAWb,EAAMc,OAAOC,MAAM,KA1BpB,EA6BnBC,YAAc,SAAAhB,GACZ,EAAKY,SAAL,eACGZ,EAAMc,OAAOG,KAAOjB,EAAMc,OAAOI,SA/BnB,EAmCnBC,UAAY,WAAO,IACTlB,EAAiB,EAAKC,MAAtBD,aACJmB,EAAW,CACbC,MAAO,EAAKnB,MAAMmB,MAClBC,SAAU,EAAKpB,MAAMoB,SACrBC,KAAM,EAAKrB,MAAMqB,KACjBC,KAAM,CAAEC,IAAK,EAAKvB,MAAMuB,MAEtBC,EAAc,GAClBA,EAAYC,KAAKP,GACjB,IAAIb,EAAUN,EAAaO,OAAOkB,GAClC,EAAKd,SAAS,CACZX,aAAcM,EACdc,MAAO,GACPC,SAAU,GACVC,KAAM,GACNE,IAAK,MAnDU,EAuDnBG,eAAiB,WAAO,IACd3B,EAAiB,EAAKC,MAAtBD,aAIJ4B,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,SAJa,cAKfH,EAAEI,KACA,wCAGAC,mBAAmBzB,KAAK0B,UAAUlC,IACpC4B,EAAEf,OAAS,SACXgB,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QACFR,SAASM,KAAKG,YAAYV,IApE1B,EAAK3B,MAAQ,CACXD,aAAc,GACdoB,MAAO,GACPC,SAAU,GACVC,KAAM,GACNE,IAAK,IAPU,E,sEAwET,IACAxB,EAAiBuC,KAAKtC,MAAtBD,aACR,OACE,oCACE,yBAAKwC,MAAO,CAAEC,OAAQ,SACpB,2BAAOnB,KAAK,OAAON,KAAK,SAAS0B,SAAUH,KAAKzC,qBAChD,+BACE,4BACE,0CACA,wCACA,oCACA,wCAEDE,GACCA,EAAa2C,KAAI,SAAAC,GAAI,OACnB,4BACE,4BAAKA,EAAKxB,OACV,4BAAKwB,EAAKvB,UACV,4BAAKuB,EAAKtB,MACV,4BAAKsB,EAAKrB,KAAKC,SAGrB,4BACE,4BACE,2BACEF,KAAK,OACLN,KAAK,QACLC,MAAOsB,KAAKtC,MAAMmB,MAClBsB,SAAUH,KAAKxB,eAGnB,4BACE,2BACEO,KAAK,OACLN,KAAK,WACLC,MAAOsB,KAAKtC,MAAMoB,SAClBqB,SAAUH,KAAKxB,eAGnB,4BACE,2BACEO,KAAK,OACLN,KAAK,OACLC,MAAOsB,KAAKtC,MAAMqB,KAClBoB,SAAUH,KAAKxB,eAGnB,4BACE,2BACEO,KAAK,OACLN,KAAK,MACLC,MAAOsB,KAAKtC,MAAMuB,IAClBkB,SAAUH,KAAKxB,iBAMvB,yBAAK8B,UAAU,iBACb,4BAAQC,QAASP,KAAKrB,WAAtB,OACA,4BAAQ4B,QAASP,KAAKZ,gBAAtB,mB,GArIwBoB,aCUhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAYzB,SAAS0B,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7d462caf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: [],\r\n      color: \"\",\r\n      category: \"\",\r\n      type: \"\",\r\n      hex: \"\"\r\n    };\r\n  }\r\n\r\n  fileChangedHandler = event => {\r\n    const { selectedFile } = this.state;\r\n    let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      if (selectedFile.length !== 0) {\r\n        var newList = selectedFile.concat(JSON.parse(reader.result));\r\n        this.setState({\r\n          selectedFile: newList\r\n        });\r\n      } else {\r\n        this.setState({\r\n          selectedFile: JSON.parse(reader.result)\r\n        });\r\n      }\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n  };\r\n\r\n  handleInput = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { selectedFile } = this.state;\r\n    var newColor = {\r\n      color: this.state.color,\r\n      category: this.state.category,\r\n      type: this.state.type,\r\n      code: { hex: this.state.hex }\r\n    };\r\n    var newListItem = [];\r\n    newListItem.push(newColor);\r\n    var newList = selectedFile.concat(newListItem);\r\n    this.setState({\r\n      selectedFile: newList,\r\n      color: \"\",\r\n      category: \"\",\r\n      type: \"\",\r\n      hex: \"\"\r\n    });\r\n  };\r\n\r\n  handleDownload = () => {\r\n    const { selectedFile } = this.state;\r\n    let filename = \"export.json\";\r\n    let contentType = \"application/json;charset=utf-8;\";\r\n\r\n    var a = document.createElement(\"a\");\r\n    a.download = filename;\r\n    a.href =\r\n      \"data:\" +\r\n      contentType +\r\n      \",\" +\r\n      encodeURIComponent(JSON.stringify(selectedFile));\r\n    a.target = \"_blank\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  };\r\n  render() {\r\n    const { selectedFile } = this.state;\r\n    return (\r\n      <>\r\n        <div style={{ margin: \"50px\" }}>\r\n          <input type=\"file\" name=\"colors\" onChange={this.fileChangedHandler} />\r\n          <table>\r\n            <tr>\r\n              <th>Color name</th>\r\n              <th>Category</th>\r\n              <th>Type</th>\r\n              <th>HexCode</th>\r\n            </tr>\r\n            {selectedFile &&\r\n              selectedFile.map(item => (\r\n                <tr>\r\n                  <td>{item.color}</td>\r\n                  <td>{item.category}</td>\r\n                  <td>{item.type}</td>\r\n                  <td>{item.code.hex}</td>\r\n                </tr>\r\n              ))}\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"color\"\r\n                  value={this.state.color}\r\n                  onChange={this.handleInput}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"category\"\r\n                  value={this.state.category}\r\n                  onChange={this.handleInput}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"type\"\r\n                  value={this.state.type}\r\n                  onChange={this.handleInput}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"hex\"\r\n                  value={this.state.hex}\r\n                  onChange={this.handleInput}\r\n                />\r\n              </td>\r\n            </tr>\r\n          </table>\r\n\r\n          <div className=\"d-flex jc-bet\">\r\n            <button onClick={this.handleAdd}>Add</button>\r\n            <button onClick={this.handleDownload}>Download</button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Upload from \"./Upload\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Upload />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}